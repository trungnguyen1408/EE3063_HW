# -*- coding: utf-8 -*-
"""LSTM_GA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hjCHC0NCizfDvjBKNR89Ou3VTPZtz_2Y
"""

pip install pygad

import pygad
import numpy as np
import scipy

X= np.array([[1,0,0,0]]).T
Y = np.array([[0,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]).T

word = "hello"
chars = set(word)
int2char = dict(enumerate(chars))
char2int = {char:idx for idx,char in int2char.items()}
print(int2char,char2int)

inp,out = [],[]
inp = list(word[:-1])
out = list(word[1:])
print(inp,out)
for i in range(len(word)-1):
  inp[i] = char2int[inp[i]]
  out[i] = char2int[out[i]]
print(inp,out)

def one_hot_encoder(vector,seq_length,dict_size):
  features = np.zeros((seq_length,dict_size))
  for i in range(seq_length):
    features[i,vector[i]] = 1
  return features
seq_length = len(inp)
dict_size = len(char2int)
print(one_hot_encoder(inp,seq_length,dict_size))

def softmax(x): 
    return np.exp(x)/sum(np.exp(x))

def sigmoid(x):
  return 1/(1+np.exp(-x))

def crossEntropy(X,Y):
    return -np.sum(np.log(X)*Y)

def crossEntropy(X,Y):
    return -np.sum(np.log(X)*Y)

def LSTM_GA(solution, solution_idx):
    Wf = solution[0:21].reshape(3,7)
    Wi = solution[21:42].reshape(3,7)
    Wc = solution[42:63].reshape(3,7)
    Wo = solution[63:84].reshape(3,7)
    bf = solution[84:87].reshape(3,1)
    bi = solution[87:90].reshape(3,1)
    bc = solution[90:93].reshape(3,1)
    bo = solution[93:96].reshape(3,1)
    Why = solution[96:108].reshape(4,3)
    by = solution[108:112].reshape(4,1)
    
    
    h_s = np.zeros((3,1))
    y_s = X
    C_s = np.zeros((3,1))

    for t in range(X.shape[0]):
        x_t = y_s[:,-1].reshape(4,1)
        z_t = np.vstack((x_t,h_s[:,-1].reshape(3,1)))  ## x_t + h_(t-1)
        
        f_t = sigmoid(np.dot(Wf,z_t)+bf)
        i_t = sigmoid(np.dot(Wi,z_t)+bi)
        C_t1 = np.tanh(np.dot(Wc,z_t)+bi) # C mu t
        C_t = f_t*C_s[:,-1].reshape(3,1) +i_t*C_t1
        o_t = sigmoid(np.dot(Wo,z_t)+bo)
        h_t = o_t*np.tanh(C_t)
        y_t = softmax(np.dot(Why, h_t) + by) 
        
        h_s = np.hstack((h_s,h_t)) 
        y_s = np.hstack((y_s,y_t))
        C_s = np.hstack((C_s,C_t))
    h_s = h_s[:,1:]
    y_s = y_s[:,1:]
    return 1/np.sum(crossEntropy(y_s,Y))

def LSTM(solution, solution_idx,X,Y):
    Wf = solution[0:21].reshape(3,7)
    Wi = solution[21:42].reshape(3,7)
    Wc = solution[42:63].reshape(3,7)
    Wo = solution[63:84].reshape(3,7)
    bf = solution[84:87].reshape(3,1)
    bi = solution[87:90].reshape(3,1)
    bc = solution[90:93].reshape(3,1)
    bo = solution[93:96].reshape(3,1)
    Why = solution[96:108].reshape(4,3)
    by = solution[108:112].reshape(4,1)
    
    
    h_s = np.zeros((3,1))
    y_s = X
    C_s = np.zeros((3,1))

    for t in range(X.shape[0]):
        x_t = y_s[:,-1].reshape(4,1)
        z_t = np.vstack((x_t,h_s[:,-1].reshape(3,1)))  ## x_t + h_(t-1)
        
        f_t = sigmoid(np.dot(Wf,z_t)+bf)
        i_t = sigmoid(np.dot(Wi,z_t)+bi)
        C_t1 = np.tanh(np.dot(Wc,z_t)+bi) # C mu t
        C_t = f_t*C_s[:,-1].reshape(3,1) +i_t*C_t1
        o_t = sigmoid(np.dot(Wo,z_t)+bo)
        h_t = o_t*np.tanh(C_t)
        y_t = softmax(np.dot(Why, h_t) + by) 
        
        h_s = np.hstack((h_s,h_t)) 
        y_s = np.hstack((y_s,y_t))
        C_s = np.hstack((C_s,C_t))
    h_s = h_s[:,1:]
    y_s = y_s[:,1:]
    return h_s,y_s,crossEntropy(y_s,Y)

fitness_function = LSTM_GA
num_generations = 100
num_parents_mating = 10
sol_per_pop = 20
num_genes = 116

init_range_low = -2
init_range_high = 5

parent_selection_type = "sss"
keep_parents = 1

crossover_type ="single_point"

mutation_type = "random"
mutation_percent_genes = 20


ga_instance = pygad.GA(
                       num_generations=num_generations,
                       num_parents_mating=num_parents_mating,
                       fitness_func=fitness_function,
                       sol_per_pop=sol_per_pop,
                       num_genes=num_genes,
                       init_range_low=init_range_low,
                       init_range_high=init_range_high,
                       parent_selection_type=parent_selection_type,
                       keep_parents=keep_parents,
                       crossover_type=crossover_type,
                       mutation_type=mutation_type,
                       mutation_percent_genes=mutation_percent_genes)

ga_instance.run()

solution, solution_fitness, solution_idx = ga_instance.best_solution()

print("Fitness value of the best solution = {solution_fitness}".format(solution_fitness=solution_fitness))

h,y,Loss =LSTM(solution,solution,X,Y)
print("Ket qua thu duoc y = \n {} \n Ket qua sau khi lam tron 3 chu so y= \n {}. \n Loss= {} ".format(y,np.round(y,decimals=3),Loss))

Wf = solution[0:21].reshape(3,7)
Wi = solution[21:42].reshape(3,7)
Wc = solution[42:63].reshape(3,7)
Wo = solution[63:84].reshape(3,7)
bf = solution[84:87].reshape(3,1)
bi = solution[87:90].reshape(3,1)
bc = solution[90:93].reshape(3,1)
bo = solution[93:96].reshape(3,1)
Why = solution[96:108].reshape(4,3)
by = solution[108:112].reshape(4,1)

print("Wf:\n {} ".format(np.round(Wf,decimals=3)))
print("Wi:\n {} ".format(np.round(Wi,decimals=3)))
print("Wc:\n {} ".format(np.round(Wc,decimals=3)))
print("Wo:\n {} ".format(np.round(Wo,decimals=3)))
print("Why:\n {} ".format(np.round(Why,decimals=3)))

print("bf:\n {} ".format(np.round(bf,decimals=3)))
print("bi:\n {} ".format(np.round(bi,decimals=3)))
print("bc:\n {} ".format(np.round(bc,decimals=3)))
print("bo:\n {} ".format(np.round(bo,decimals=3)))
print("by:\n {} ".format(np.round(by,decimals=3)))